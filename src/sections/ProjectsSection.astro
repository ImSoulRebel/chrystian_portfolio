---
import { ProjectCard } from '@components';
import { useTranslations, type Locale, translations } from '@utils/i18n';
import * as assets from '@assets';
import { getCollection } from 'astro:content';

// Recibir locale como prop en lugar de detectarlo
interface Props {
  locale?: Locale;
}

const { locale = 'es' } = Astro.props;
const t = useTranslations(locale);

// Relacionar ids con assets locales si aplica
const projectImages: Record<string, any> = {
  yuvod: assets.yuvodLogo,
  bnc10: assets.bnc10Logo,
  tookane: assets.tookaneLogo,
  stelcamping: assets.stelLogo,
  nextival: assets.nextivalLogo,
  portfolio: assets.projectPlaceholder,
};

// Filtrar y ordenar los proyectos destacados (top 3)
const allProjects = await getCollection('projects');
const projects = allProjects
  .filter((p) => p.data.featured)
  .sort((a, b) => (a.data.priority ?? 99) - (b.data.priority ?? 99))
  .slice(0, 3)
  .map((p) => {
    const projectT = translations[locale as Locale].projects.list[p.data.id];
    if (!projectT)
      throw new Error(`Missing translations for project: ${p.data.id}`);
    return {
      title: projectT.title,
      stack: projectT.stack,
      description: projectT.description,
      impact: projectT.impact,
      featured: p.data.featured,
      liveUrl: p.data.liveUrl,
      githubUrl: p.data.githubUrl,
      image: projectImages[p.data.id] || null,
    };
  });
---

<section id="projects" class="projects">
  <div class="container">
    <div class="projects-header">
      <h2 class="section-title">{t('projects.title')}</h2>
      <p class="section-subtitle">{t('projects.subtitle')}</p>
    </div>

    <div class="projects-grid">
      {
        projects.map((project) => (
          <ProjectCard
            title={project.title}
            stack={project.stack}
            description={project.description}
            impact={project.impact}
            featured={project.featured}
            liveUrl={project.liveUrl}
            githubUrl={project.githubUrl}
            image={project.image}
            locale={locale}
          />
        ))
      }
    </div>

    <div class="view-more-container">
      <a href={`/${locale}/projects`} class="btn btn-primary">
        <span>{t('projects.viewMore')}</span>
        <svg
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M7 17L17 7M17 7H7M17 7V17"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </a>
    </div>
  </div>
</section>

<style>
  .projects {
    padding: 6rem 0;
    background: var(--background-card);
    position: relative;
  }

  .projects::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent,
      var(--primary-color),
      transparent
    );
    opacity: 0.3;
  }

  .projects-header {
    text-align: center;
    margin-bottom: 4rem;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }

  .section-title {
    font-size: clamp(2.5rem, 5vw, 3.5rem);
    background: var(--gradient-primary);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin-bottom: 1.5rem;
    font-weight: 700;
    letter-spacing: -0.02em;
  }

  .section-subtitle {
    font-size: 1.2rem;
    color: var(--text-secondary);
    line-height: 1.6;
    margin-bottom: 0;
    font-weight: 400;
  }

  .projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
    margin-bottom: 4rem;
    justify-items: center;
    align-items: start;
  }

  .view-more-container {
    display: flex;
    justify-content: center;
    margin-top: 3rem;
  }

  .view-more-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 2rem;
    background: var(--gradient-primary);
    color: #1a1a2e;
    border-radius: 50px;
    font-weight: 600;
    font-size: 1.1rem;
    text-decoration: none;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 4px 20px rgba(0, 212, 255, 0.3);
    position: relative;
    overflow: hidden;
  }

  .view-more-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.3),
      transparent
    );
    transition: left 0.6s ease;
  }

  .view-more-btn:hover::before {
    left: 100%;
  }

  .view-more-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 30px rgba(0, 212, 255, 0.4);
    color: #1a1a2e;
  }

  .view-more-btn svg {
    transition: transform 0.3s ease;
  }

  .view-more-btn:hover svg {
    transform: translate(3px, -3px);
  }

  /* Responsive Design */
  @media (max-width: 1200px) {
    .projects-grid {
      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
      gap: 1.8rem;
    }
  }

  @media (max-width: 900px) {
    .projects-grid {
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
    }
  }

  @media (max-width: 600px) {
    .projects-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .projects {
      padding: 4rem 0;
    }

    .projects-header {
      margin-bottom: 3rem;
    }

    .section-subtitle {
      font-size: 1.1rem;
    }

    .projects-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
      margin-bottom: 3rem;
    }

    .view-more-btn {
      padding: 0.875rem 1.75rem;
      font-size: 1rem;
    }
  }

  @media (max-width: 480px) {
    .container {
      padding: 0 1rem;
    }

    .projects-grid {
      gap: 1.25rem;
    }

    .view-more-btn {
      padding: 0.75rem 1.5rem;
      font-size: 0.95rem;
    }
  }
</style>
