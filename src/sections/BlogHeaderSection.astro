---
import { formatDate, useTranslations } from '@utils/i18n';

interface BlogHeaderSectionProps {
  title: Record<string, string>;
  description?: Record<string, string>;
  author?: string;
  tags?: string[];
  createdAt: string;
  updatedAt?: string;
  lang: 'es' | 'en';
}

const { title, description, author, tags, createdAt, updatedAt, lang } =
  Astro.props as BlogHeaderSectionProps;

const t = useTranslations(lang);
const backToBlogLabel = t('blog.blogHeader.backToBlogLabel');
const authorLabel = t('blog.blogHeader.authorLabel');
const updatedLabel = t('blog.blogHeader.updatedLabel');
const formattedCreatedAt = formatDate(new Date(createdAt), lang, {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});
const formattedUpdatedAt =
  updatedAt && updatedAt !== createdAt
    ? formatDate(new Date(updatedAt), lang, {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      })
    : null;
---

<header class="blog-header">
  <nav class="blog-nav" aria-label="Volver al listado de blogs">
    <a href={`/${lang}/blog`} class="blog-link">
      {backToBlogLabel}
    </a>
  </nav>
  <h1 itemprop="headline" class="blog-title">{title[lang]}</h1>
  {
    description?.[lang] && (
      <p class="lead blog-description" itemprop="description">
        {description[lang]}
      </p>
    )
  }
  <div class="post-meta">
    {
      author && (
        <span
          class="author"
          itemprop="author"
          itemscope
          itemtype="https://schema.org/Person"
        >
          {authorLabel} <strong itemprop="name">{author}</strong>
        </span>
      )
    }
    <time datetime={createdAt} itemprop="datePublished">
      {formattedCreatedAt}
    </time>
    {
      formattedUpdatedAt && (
        <span class="updated" itemprop="dateModified">
          {updatedLabel} {formattedUpdatedAt}
        </span>
      )
    }
  </div>
  {
    Array.isArray(tags) && tags.length > 0 && (
      <ul class="tags" itemprop="keywords">
        {tags.map((tag) => (
          <li class="tag">{tag}</li>
        ))}
      </ul>
    )
  }
</header>

<style>
  .blog-header {
    margin-bottom: 1rem;
    margin-top: 0.5rem;
    z-index: 2;
    position: relative;
    background: transparent;
  }
  .blog-nav {
    display: flex;
    gap: 1.2em;
    align-items: center;
    margin-bottom: 1.5em;
  }
  .blog-link {
    font-size: 0.8em;
    color: var(--color-accent, #0077cc);
    text-decoration: none;
    background: none;
    border: none;
    padding: 0.2em 0.1em;
    border-radius: 0.2em;
    transition:
      color 0.2s,
      background 0.2s;
    cursor: pointer;
  }
  .blog-link:hover {
    color: var(--color-accent-hover, #005fa3);
    background: var(--primary-color, #0077cc);
    text-decoration: none;
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 212, 255, 0.13);
  }
  .blog-title {
    font-size: 1.2rem;
    font-weight: 700;
    margin-bottom: 0.5em;
  }
  .blog-description {
    font-size: 0.8em;
    margin-bottom: 1.5em;
    color: var(--color-secondary, #444);
    .post-meta {
      margin-bottom: 1em;
      color: #666;
      font-size: 0.7em;
      display: flex;
      flex-wrap: wrap;
      gap: 1.5em;
      align-items: center;
    }
  }
  .tag {
    background: var(--color-tag-bg, var(--color-primary, #0077ff));
    color: var(--color-tag-text, var(--color-on-primary, #fff));
    border-radius: 0.5em;
    padding: 0.25em 0.9em;
    font-size: 0.8em;
    font-weight: 500;
    letter-spacing: 0.03em;
    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.07);
    transition:
      background 0.2s,
      color 0.2s;
    display: inline-block;
    margin-right: 0.5em;
    margin-bottom: 0.3em;
  }
  .tag:hover,
  .tag:focus {
    background: var(--color-tag-hover, var(--color-secondary, #005bb5));
    color: var(--color-tag-hover-text, var(--color-on-secondary, #fff));
    outline: none;
  }
</style>
