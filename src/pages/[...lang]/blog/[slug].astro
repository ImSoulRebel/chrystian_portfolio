---
import { getCollection, type CollectionEntry } from 'astro:content';
import { Layout } from '@layouts';

export async function getStaticPaths() {
  const blogPosts = await getCollection('blog');

  return blogPosts.flatMap((post) => [
    {
      params: { lang: 'es', slug: post.id },
      props: { post, lang: 'es' },
    },
    {
      params: { lang: 'en', slug: post.id },
      props: { post, lang: 'en' },
    },
  ]);
}

type Props = {
  post: CollectionEntry<'blog'>;
  lang: 'es' | 'en';
};

const { post, lang } = Astro.props;
const { title, description, author, tags, createdAt, updatedAt, image } =
  post.data;
const { Content } = await post.render();
---

<Layout
  title={title[lang]}
  description={description?.[lang]}
  layoutContext={{ locale: lang, hasNavLinks: false, pageType: 'blog' }}
>
  <!-- <BackToHome locale={lang} /> -->

  <article class="blog-post" itemscope itemtype="https://schema.org/BlogPosting">
    <header class="blog-header">
        <nav class="blog-nav">
            <a href={`/${lang}/blog`} class="blog-link">
              {lang === 'es' ? '← Ver todos los blogs' : '← All posts'}
            </a>
        </nav>
        <h1 itemprop="headline" class="blog-title">{title[lang]}</h1>
        {description?.[lang] && <p class="lead blog-description" itemprop="description">{description[lang]}</p>}
        <div class="post-meta">
          {author && (
            <span class="author" itemprop="author" itemscope itemtype="https://schema.org/Person">
              {lang === 'es' ? 'Por' : 'By'} <strong itemprop="name">{author}</strong>
            </span>
          )}
          <time datetime={createdAt} itemprop="datePublished">
            {new Date(createdAt).toLocaleDateString(
              lang === 'es' ? 'es-ES' : 'en-US',
              { year: 'numeric', month: 'long', day: 'numeric' }
            )}
          </time>
          {updatedAt && updatedAt !== createdAt && (
            <span class="updated" itemprop="dateModified">
              {lang === 'es' ? 'Actualizado:' : 'Updated:'}{' '}
              {new Date(updatedAt).toLocaleDateString(
                lang === 'es' ? 'es-ES' : 'en-US',
                { year: 'numeric', month: 'long', day: 'numeric' }
              )}
            </span>
          )}
        </div>
        {Array.isArray(tags) && tags.length > 0 && (
          <ul class="tags" itemprop="keywords">
            {tags.map((tag) => (
              <li class="tag">{tag}</li>
            ))}
          </ul>
        )}
      </header>
    {image && (
      <figure class="featured-image-wrapper">
        <img
          src={`/images/blog/${image}`}
          alt={title[lang]}
          class="featured-image"
          itemprop="image"
        />
      </figure>
    )}
    <section class="content" itemprop="articleBody">
      <Content />
    </section>

    <!-- Aquí puedes agregar enlaces relacionados, autor, fecha, etc.
    <footer class="post-footer">
    </footer> -->
  </article>

<style>
  .blog-post {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
    margin-top: 3.5rem;
  }
  .blog-header {
    margin-bottom: 2.5rem;
    margin-top: 0.5rem;
    z-index: 2;
    position: relative;
    background: transparent;
  }
  .blog-nav {
    display: flex;
    gap: 1.2em;
    align-items: center;
    margin-bottom: 1.5em;
  }
  .back-link {
    .blog-link {
      font-size: 1em;
      color: var(--color-accent, #0077cc);
      text-decoration: underline;
      background: none;
      border: none;
      padding: 0.2em 0.1em;
      border-radius: 0.2em;
      transition:
        color 0.2s,
        background 0.2s;
      cursor: pointer;
    }
    .blog-link:hover {
      color: var(--color-accent-hover, #005fa3);
      background: var(--color-bg-link-hover, #eaf6ff);
      text-decoration: underline;
    }
  .blog-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5em;
    color: var(--color-primary, #222);
  }
  .blog-description {
    font-size: 1.25rem;
    margin-bottom: 1.5em;
    color: var(--color-secondary, #444);
  }
  .blog-content {
    font-size: 1.1rem;
    line-height: 1.7;
    margin-bottom: 2.5em;
    color: var(--color-text, #222);
  }
  .blog-summary,
    .post-footer {
    opacity: 0.85;
    font-size: 0.95rem;
    background: var(--color-bg-summary, #f8f8f8);
    border-radius: 0.5em;
    padding: 1.5em 1em;
    margin-top: 2em;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
  }
  .featured-image-wrapper {
    margin-bottom: 1em;
    text-align: center;
  }
  .featured-image {
    max-width: 320px;
    width: 100%;
    border-radius: 0.5em;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  }
  .post-meta {
    margin-bottom: 1em;
    color: #666;
    font-size: 0.95em;
    display: flex;
    flex-wrap: wrap;
    gap: 1.5em;
    align-items: center;
  }
  .tags {
    list-style: none;
    padding: 0;
    display: flex;
    gap: 0.5em;
    flex-wrap: wrap;
  }
  .tag {
    background: #e0e0e0;
    color: #333;
    border-radius: 0.3em;
    padding: 0.2em 0.7em;
    font-size: 0.92em;
  }
</style>
</Layout>

<style>
  .blog-post {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
      <h1 itemprop="headline" class="blog-title">{title[lang]}</h1>
      {description?.[lang] && <p class="lead blog-description" itemprop="description">{description[lang]}</p>}
    </header>
    <section class="content blog-content" itemprop="articleBody">
      <Content />
    </section>
    <footer class="blog-summary">
      {image && (
        <figure class="featured-image-wrapper">
          <img
            src={`/images/blog/${image}`}
            alt={title[lang]}
            class="featured-image"
            itemprop="image"
          />
        </figure>
      )}
      <div class="post-meta">
        {author && (
          <span class="author" itemprop="author" itemscope itemtype="https://schema.org/Person">
            {lang === 'es' ? 'Por' : 'By'} <strong itemprop="name">{author}</strong>
          </span>
        )}
        <time datetime={createdAt} itemprop="datePublished">
          {new Date(createdAt).toLocaleDateString(
            lang === 'es' ? 'es-ES' : 'en-US',
            { year: 'numeric', month: 'long', day: 'numeric' }
          )}
        </time>
        {updatedAt && updatedAt !== createdAt && (
          <span class="updated" itemprop="dateModified">
            {lang === 'es' ? 'Actualizado:' : 'Updated:'}{' '}
            {new Date(updatedAt).toLocaleDateString(
              lang === 'es' ? 'es-ES' : 'en-US',
              { year: 'numeric', month: 'long', day: 'numeric' }
            )}
          </span>
        )}
      </div>
      {Array.isArray(tags) && tags.length > 0 && (
        <ul class="tags" itemprop="keywords">
          {tags.map((tag) => (
            <li class="tag">{tag}</li>
          ))}
        </ul>
      )}
    </footer>
    flex-wrap: wrap;
    gap: 1.5rem;
    font-size: 0.95rem;
    color: #888;
    margin-bottom: 1rem;
  }

    .author strong {
      color: #333;
    }

    .updated {
      font-style: italic;
    }

    .tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-top: 1rem;
    }

    .tag {
      padding: 0.25rem 0.75rem;
      background: #f0f0f0;
      border-radius: 4px;
      font-size: 0.85rem;
    }

    .featured-image {
      width: 100%;
      height: auto;
      border-radius: 8px;
      margin-bottom: 2rem;
    }

    .content {
      font-size: 1.1rem;
      line-height: 1.8;
    }

    .content :global(h2) {
      margin-top: 2rem;
      margin-bottom: 1rem;
    }

    .content :global(p) {
      margin-bottom: 1.5rem;
    }

    .content :global(code) {
      background: #f5f5f5;
      padding: 0.2rem 0.4rem;
      border-radius: 3px;
      font-size: 0.9em;
    }

    .content :global(pre) {
      background: #1e1e1e;
      color: #d4d4d4;
      padding: 1.5rem;
      border-radius: 8px;
      overflow-x: auto;
      margin: 2rem 0;
    }
  </style>
</Layout>
