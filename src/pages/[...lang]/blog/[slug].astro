---
import { getCollection, type CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const blogPosts = await getCollection('blog');

  return blogPosts.flatMap((post) => [
    {
      params: { lang: 'es', slug: post.id },
      props: { post, lang: 'es' },
    },
    {
      params: { lang: 'en', slug: post.id },
      props: { post, lang: 'en' },
    },
  ]);
}

type Props = {
  post: CollectionEntry<'blog'>;
  lang: 'es' | 'en';
};

const { post, lang } = Astro.props;
const { title, description, author, tags, createdAt, updatedAt, image } =
  post.data;
const { Content } = await post.render();
---

<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title[lang]} - Chrystian Michell</title>
    {
      description?.[lang] && (
        <meta name="description" content={description[lang]} />
      )
    }
  </head>
  <body>
    <article class="blog-post">
      <header>
        <a href={`/${lang}/blog`} class="back-link">
          ‚Üê {lang === 'es' ? 'Volver al blog' : 'Back to blog'}
        </a>

        <h1>{title[lang]}</h1>

        {description?.[lang] && <p class="lead">{description[lang]}</p>}

        <div class="post-meta">
          {
            author && (
              <span class="author">
                {lang === 'es' ? 'Por' : 'By'} <strong>{author}</strong>
              </span>
            )
          }

          <time datetime={createdAt}>
            {
              new Date(createdAt).toLocaleDateString(
                lang === 'es' ? 'es-ES' : 'en-US',
                {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                }
              )
            }
          </time>

          {
            updatedAt && updatedAt !== createdAt && (
              <span class="updated">
                {lang === 'es' ? 'Actualizado:' : 'Updated:'}{' '}
                {new Date(updatedAt).toLocaleDateString(
                  lang === 'es' ? 'es-ES' : 'en-US',
                  {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                  }
                )}
              </span>
            )
          }
        </div>

        {
          Array.isArray(tags) && tags.length > 0 && (
            <div class="tags">
              {tags.map((tag) => (
                <span class="tag">{tag}</span>
              ))}
            </div>
          )
        }
      </header>

      {
        image && (
          <img
            src={`/images/blog/${image}`}
            alt={title[lang]}
            class="featured-image"
          />
        )
      }

      <div class="content">
        <Content />
      </div>
    </article>
  </body>
</html>

<style>
  .blog-post {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
  }

  .back-link {
    display: inline-block;
    margin-bottom: 2rem;
    text-decoration: none;
    color: #0066cc;
  }

  .back-link:hover {
    text-decoration: underline;
  }

  header {
    margin-bottom: 3rem;
  }

  h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    line-height: 1.2;
  }

  .lead {
    font-size: 1.25rem;
    color: #666;
    margin-bottom: 1.5rem;
  }

  .post-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    font-size: 0.95rem;
    color: #888;
    margin-bottom: 1rem;
  }

  .author strong {
    color: #333;
  }

  .updated {
    font-style: italic;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .tag {
    padding: 0.25rem 0.75rem;
    background: #f0f0f0;
    border-radius: 4px;
    font-size: 0.85rem;
  }

  .featured-image {
    width: 100%;
    height: auto;
    border-radius: 8px;
    margin-bottom: 2rem;
  }

  .content {
    font-size: 1.1rem;
    line-height: 1.8;
  }

  .content :global(h2) {
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .content :global(p) {
    margin-bottom: 1.5rem;
  }

  .content :global(code) {
    background: #f5f5f5;
    padding: 0.2rem 0.4rem;
    border-radius: 3px;
    font-size: 0.9em;
  }

  .content :global(pre) {
    background: #1e1e1e;
    color: #d4d4d4;
    padding: 1.5rem;
    border-radius: 8px;
    overflow-x: auto;
    margin: 2rem 0;
  }
</style>
