---
import { getLocalizedPath, getAlternateLocale, type Locale } from '@utils/i18n';

interface Props {
  currentLocale: Locale;
  currentPath: string;
}

const { currentLocale, currentPath } = Astro.props;

const alternateLocale = getAlternateLocale(currentLocale);
const alternatePath = getLocalizedPath(currentPath, alternateLocale);

const languageLabels = {
  es: { flag: 'ðŸ‡ªðŸ‡¸', label: 'ES', name: 'EspaÃ±ol' },
  en: { flag: 'ðŸ‡ºðŸ‡¸', label: 'EN', name: 'English' },
};

const currentLang = languageLabels[currentLocale];
const alternateLang = languageLabels[alternateLocale];
---

<div class="language-selector">
  <button
    class="lang-toggle"
    aria-label={`Switch to ${alternateLang.name}`}
    data-lang-toggle
    data-current={currentLocale}
    data-alternate={alternateLocale}
    data-path={alternatePath}
  >
    <div class="lang-current">
      <span class="lang-flag">{currentLang.flag}</span>
      <span class="lang-label">{currentLang.label}</span>
    </div>
    <div class="lang-dropdown">
      <a href={alternatePath} class="lang-option" hreflang={alternateLocale}>
        <!-- <span class="lang-flag">{alternateLang.flag}</span> -->
        <!-- <span class="lang-label">{alternateLang.label}</span> -->
        <span class="lang-name">{alternateLang.name}</span>
      </a>
    </div>
    <svg
      class="lang-arrow"
      width="12"
      height="8"
      viewBox="0 0 12 8"
      fill="none"
    >
      <path
        d="M1 1.5L6 6.5L11 1.5"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </button>
</div>

<style>
  .language-selector {
    position: relative;
    z-index: 1001;
  }

  .lang-toggle {
    position: relative;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    user-select: none;
  }

  .lang-toggle:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(0, 212, 255, 0.4);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 212, 255, 0.15);
  }

  .lang-current {
    display: flex;
    align-items: center;
    gap: 0.375rem;
  }

  .lang-flag {
    font-size: 1rem;
    line-height: 1;
  }

  .lang-label {
    font-weight: 600;
    letter-spacing: 0.025em;
  }

  .lang-arrow {
    transition: transform 0.3s ease;
    color: var(--text-secondary);
  }

  .lang-toggle:hover .lang-arrow {
    color: var(--primary-color);
  }

  .lang-toggle.active .lang-arrow {
    transform: rotate(180deg);
  }

  .lang-dropdown {
    position: absolute;
    top: calc(100% + 0.5rem);
    left: 0;
    right: 0;
    background: rgba(15, 15, 35, 0.95);
    backdrop-filter: blur(15px);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    padding: 0.5rem;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-0.5rem);
    transition: all 0.3s ease;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  .lang-toggle.active .lang-dropdown {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .lang-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    border-radius: 6px;
    color: var(--text-secondary);
    text-decoration: none;
    transition: all 0.2s ease;
    font-size: 0.875rem;
  }

  .lang-option:hover {
    background: rgba(0, 212, 255, 0.1);
    color: var(--text-primary);
  }

  .lang-name {
    margin-left: auto;
    font-size: 0.8rem;
    opacity: 0.8;
  }

  /* Mobile adaptations */
  @media (max-width: 768px) {
    .language-selector {
      position: fixed;
      top: 1rem;
      right: 1rem;
      z-index: 1002;
    }

    .lang-toggle {
      padding: 0.625rem 0.875rem;
      font-size: 0.8rem;
    }

    .lang-dropdown {
      left: auto;
      right: 0;
      min-width: 140px;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .lang-toggle {
      border-color: var(--primary-color);
      background: rgba(0, 0, 0, 0.8);
    }

    .lang-dropdown {
      background: var(--bg-primary);
      border-color: var(--primary-color);
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .lang-toggle,
    .lang-dropdown,
    .lang-arrow,
    .lang-option {
      transition: none;
    }
  }
</style>

<script>
  class LanguageSelector {
    private toggle: HTMLButtonElement | null;
    private dropdown: HTMLElement | null;

    constructor() {
      this.toggle = document.querySelector(
        '[data-lang-toggle]',
      ) as HTMLButtonElement;
      this.dropdown = document.querySelector('.lang-dropdown') as HTMLElement;
      this.init();
    }

    private init() {
      if (!this.toggle) return;

      // Toggle dropdown
      this.toggle.addEventListener('click', (e) => {
        e.stopPropagation();
        this.toggleDropdown();
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', () => {
        this.closeDropdown();
      });

      // Handle keyboard navigation
      this.toggle.addEventListener('keydown', this.handleKeydown.bind(this));

      // Close dropdown on escape
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.closeDropdown();
        }
      });
    }

    private toggleDropdown() {
      const isActive = this.toggle?.classList.contains('active');

      if (isActive) {
        this.closeDropdown();
      } else {
        this.openDropdown();
      }
    }

    private openDropdown() {
      this.toggle?.classList.add('active');
      this.toggle?.setAttribute('aria-expanded', 'true');
    }

    private closeDropdown() {
      this.toggle?.classList.remove('active');
      this.toggle?.setAttribute('aria-expanded', 'false');
    }

    private handleKeydown(e: KeyboardEvent) {
      switch (e.key) {
        case 'Enter':
        case ' ':
          e.preventDefault();
          this.toggleDropdown();
          break;
        case 'ArrowDown':
          e.preventDefault();
          this.openDropdown();
          // Focus first option
          const firstOption = this.dropdown?.querySelector(
            '.lang-option',
          ) as HTMLElement;
          firstOption?.focus();
          break;
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new LanguageSelector();
  });

  // Reinitialize on navigation (for SPA-like behavior)
  document.addEventListener('astro:page-load', () => {
    new LanguageSelector();
  });
</script>
