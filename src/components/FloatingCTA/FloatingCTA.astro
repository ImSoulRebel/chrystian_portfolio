---
import { Icon } from '@components';
import { type Locale } from '@utils/i18n';
import { floatingCTA } from '@config/translations';
import styles from './floatingCTA.module.css';

interface Props {
  locale?: Locale;
  mode?: 'contact' | 'navigate-to-contact';
}

const { locale = 'es', mode = 'contact' } = Astro.props;
const floatingCTAT = floatingCTA[locale as Locale];

// Determine the action based on mode
const isContactMode = mode === 'contact';
const buttonHref = isContactMode ? undefined : `/${locale}/contact`;
const buttonText = floatingCTAT.contact;
const buttonIcon = isContactMode ? 'email' : 'message-circle';
---

<div
  id="floating-cta"
  class={styles.floatingCTA}
  data-mode={mode}
  data-locale={locale}
  aria-hidden="true"
>
  {
    isContactMode ? (
      <button class={'action-btn ' + styles.ctaButton} data-contact-btn>
        <div class={styles.ctaIcon}>
          <Icon name={buttonIcon} size={20} color="var(--background-dark)" />
        </div>
        <span class={styles.ctaText}>{buttonText}</span>
      </button>
    ) : (
      <a href={buttonHref} class={'action-btn ' + styles.ctaButton}>
        <div class={styles.ctaIcon}>
          <Icon name={buttonIcon} size={20} color="var(--background-dark)" />
        </div>
        <span class={styles.ctaText}>{buttonText}</span>
      </a>
    )
  }
</div>

<script>
  class FloatingCTA {
    private floatingCTA: HTMLElement | null;
    private contactSection: HTMLElement | null;
    private footerSection: HTMLElement | null;
    private isVisible: boolean = false;
    private scrollThreshold: number = 200;
    private mode: string;

    constructor() {
      this.floatingCTA = document.getElementById('floating-cta');
      this.contactSection = document.getElementById('contact');
      this.footerSection = document.querySelector('footer');
      this.mode = this.floatingCTA?.getAttribute('data-mode') || 'contact';

      if (this.floatingCTA) {
        this.init();
      }
    }

    private init(): void {
      if (this.mode === 'contact') {
        this.setupClickHandler();
      }
      this.setupIntersectionObserver();
      this.setupScrollHandler();

      // Initial check
      this.handleScroll();
    }

    private setupClickHandler(): void {
      const btn = this.floatingCTA?.querySelector('[data-contact-btn]');
      if (btn) {
        btn.addEventListener('click', () => {
          if (this.contactSection) {
            this.scrollToContact(true);
          } else {
            // Redirigir a la pÃ¡gina de contacto si no existe el elemento
            const locale =
              this.floatingCTA?.getAttribute('data-locale') || 'es';
            window.location.href = `/${locale}/contact`;
          }
        });
      }
    }

    private setupScrollHandler(): void {
      let ticking = false;

      window.addEventListener('scroll', () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            this.handleScroll();
            ticking = false;
          });
          ticking = true;
        }
      });
    }

    private setupIntersectionObserver(): void {
      // Observer for contact section (if exists and in contact mode)
      if (this.contactSection && this.mode === 'contact') {
        const contactObserver = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                this.hideButton();
              } else {
                this.handleScroll();
              }
            });
          },
          {
            threshold: 0.1,
            rootMargin: '0px 0px -100px 0px',
          }
        );

        contactObserver.observe(this.contactSection);
      }

      // Observer for footer section (for all modes)
      if (this.footerSection) {
        const footerObserver = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                this.hideButton();
              } else {
                this.handleScroll();
              }
            });
          },
          {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px',
          }
        );

        footerObserver.observe(this.footerSection);
      }
    }

    private handleScroll(): void {
      const currentScrollY = window.scrollY;
      let shouldShow = currentScrollY > this.scrollThreshold;

      // For contact mode, hide when contact section is visible
      if (this.mode === 'contact') {
        shouldShow = shouldShow && !this.isContactSectionVisible();
      }

      // Hide when footer is visible (for all modes)
      if (this.footerSection) {
        shouldShow = shouldShow && !this.isFooterSectionVisible();
      }

      if (shouldShow && !this.isVisible) {
        this.showButton();
      } else if (!shouldShow && this.isVisible) {
        this.hideButton();
      }
    }

    private isContactSectionVisible(): boolean {
      if (!this.contactSection || this.mode !== 'contact') return false;

      const rect = this.contactSection.getBoundingClientRect();
      const windowHeight = window.innerHeight;

      return rect.top < windowHeight && rect.bottom > 0;
    }

    private isFooterSectionVisible(): boolean {
      if (!this.footerSection) return false;

      const rect = this.footerSection.getBoundingClientRect();
      const windowHeight = window.innerHeight;

      // Hide FloatingCTA when footer is visible (with some margin)
      return rect.top < windowHeight + 50;
    }

    private showButton(): void {
      if (!this.floatingCTA) return;

      this.isVisible = true;
      this.floatingCTA.style.opacity = '1';
      this.floatingCTA.style.visibility = 'visible';
      this.floatingCTA.style.transform = 'translateY(0) scale(1)';
      this.floatingCTA.setAttribute('aria-hidden', 'false');

      // Add pulse effect after a delay
      setTimeout(() => {
        const ctaButton = this.floatingCTA?.querySelector(
          'button, a'
        ) as HTMLElement;
        if (ctaButton) {
          ctaButton.style.animation = 'ctaPulse 2s ease-in-out infinite';
        }
      }, 2000);
    }

    private hideButton(): void {
      if (!this.floatingCTA) return;

      this.isVisible = false;
      this.floatingCTA.style.opacity = '0';
      this.floatingCTA.style.visibility = 'hidden';
      this.floatingCTA.style.transform = 'translateY(100px) scale(0.8)';
      this.floatingCTA.setAttribute('aria-hidden', 'true');

      const ctaButton = this.floatingCTA.querySelector(
        'button, a'
      ) as HTMLElement;
      if (ctaButton) {
        ctaButton.style.animation = '';
      }
    }

    private scrollToContact(applyPulse = false): void {
      if (!this.contactSection) return;

      // Add a small offset for better visual positioning
      const offset = 80;
      const elementPosition = this.contactSection.getBoundingClientRect().top;
      const offsetPosition = elementPosition + window.pageYOffset - offset;

      window.scrollTo({
        top: offsetPosition,
        behavior: 'smooth',
      });

      // Hide button after click
      this.hideButton();

      // Optional: Add a temporary pulse to the contact section solo si se hace scroll
      if (applyPulse) {
        this.contactSection.style.animation = 'pulse 1s ease-in-out';
        setTimeout(() => {
          if (this.contactSection) {
            this.contactSection.style.animation = '';
          }
        }, 1000);
      }
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new FloatingCTA());
  } else {
    new FloatingCTA();
  }
</script>
