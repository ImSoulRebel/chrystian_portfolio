---
import LanguageSelector from './LanguageSelector/LanguageSelector.astro';
import BackToHome from './BackToHome.astro';
import {
  useTranslations,
  getRelativeLocaleUrl,
  type Locale,
} from '@utils/i18n';

// Recibir locale como prop
interface Props {
  hasNavLinks?: boolean;
  locale?: Locale;
}

const { hasNavLinks = true, locale = 'es' as Locale } = Astro.props as Props;

const t = useTranslations(locale);
const currentPath = Astro.url.pathname;

// Detectar si estamos en la página de projects o contact
const isProjectOrContactPage = currentPath.includes('/projects') || currentPath.includes('/contact');

// Obtener la URL base localizada (home page del idioma actual)
const homeUrl = getRelativeLocaleUrl(locale, '');

// Generar links de navegación localizados
const navLinks = [
  { name: t('nav.home'), href: '#home' },
  { name: t('nav.about'), href: '#about' },
  { name: t('nav.skills'), href: '#skills' },
  { name: t('nav.experience'), href: '#experience' },
  { name: t('nav.projects'), href: '#projects' },
  { name: t('nav.contact'), href: '#contact' },
];
---

<header class="header" id="header">
  <div class="container">
    <nav class="nav">
      {isProjectOrContactPage ? (
        <BackToHome locale={locale} />
      ) : (
        <div class="nav-toggle" id="nav-toggle">
          <span></span>
          <span></span>
          <span></span>
        </div>
      )}
      <a href={homeUrl} class="logo">
        <span class="logo-text">Chrystian</span>
        <span class="logo-accent">Michell</span>
      </a>
      {
        hasNavLinks && (
          <ul class="nav-menu" id="nav-menu">
            {navLinks.map((link) => (
              <li class="nav-item">
                <a href={link.href} class="nav-link">
                  {link.name}
                </a>
              </li>
            ))}
          </ul>
        )
      }

      <!-- Language Selector -->
      <LanguageSelector currentLocale={locale} currentPath={currentPath} />
    </nav>
  </div>
</header>

<style>
  .header {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    background: rgba(15, 15, 35, 0.95);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(0, 212, 255, 0.1);
    z-index: 1000;
    transition: all 0.3s ease;
  }

  .header.scrolled {
    background: rgba(15, 15, 35, 0.98);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
  }

  .nav {
      display: flex;
      justify-content: flex-start;
      align-items: center;
      padding: 1rem 0;
      position: relative;
      gap: 2rem;
    }

    .nav-toggle {
      order: 0;
      margin: 0;
      /* Sin margen para que esté pegado al logo */
    }
    }
  }

  .logo {
    display: flex;
    align-items: center;
    font-size: 1.5rem;
    font-weight: 700;
    text-decoration: none;
    cursor: pointer;
    transition: transform 0.3s ease;
  }

  .logo:hover {
    transform: scale(1.05);
  }

  .logo-text {
    color: var(--text-primary);
  }

  .logo-accent {
    color: var(--primary-color);
    margin-left: 0.2rem;
  }

  .nav-menu {
    display: flex;
    list-style: none;
    gap: 2rem;
    margin: 0;
    padding: 0;
    align-items: center;
    flex: 1;
    justify-content: center;
  }

  .nav-item {
    position: relative;
  }

  .nav-link {
    color: var(--text-secondary);
    font-weight: 500;
    font-size: 0.95rem;
    transition: all 0.3s ease;
    position: relative;
    padding: 0.5rem 0;
  }

  .nav-link::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background: var(--gradient-primary);
    transition: width 0.3s ease;
  }

  .nav-link:hover,
  .nav-link.active {
    color: var(--primary-color);
  }

  .nav-link:hover::after,
  .nav-link.active::after {
    width: 100%;
  }

  .nav-toggle {
    display: none;
    flex-direction: column;
    cursor: pointer;
    padding: 0.5rem;
  }

  .nav-toggle span {
    width: 25px;
    height: 3px;
    background: var(--primary-color);
    margin: 3px 0;
    transition: 0.3s;
    border-radius: 2px;
  }

  .nav-toggle.active span:nth-child(1) {
    transform: rotate(-45deg) translate(-5px, 6px);
  }

  .nav-toggle.active span:nth-child(2) {
    opacity: 0;
  }

  .nav-toggle.active span:nth-child(3) {
    transform: rotate(45deg) translate(-5px, -6px);
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .nav {
      gap: 1rem;
    }

    .nav-menu {
      position: absolute;
      top: 100%;
      left: 0;
      width: 100%;
      flex-direction: column;
      background: rgba(15, 15, 35, 0.98);
      backdrop-filter: blur(10px);
      padding: 2rem 0;
      transform: translateY(-100%);
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      border-bottom: 1px solid rgba(0, 212, 255, 0.1);
      justify-content: flex-start;
    }

    .nav-menu.active {
      transform: translateY(0);
      opacity: 1;
      visibility: visible;
    }

    .nav-item {
      margin: 0.5rem 0;
    }

    .nav-link {
      font-size: 1.1rem;
      padding: 1rem 0;
    }

    .nav-toggle {
      display: flex;
    }
  }
</style>

<script>
  // Header scroll effect
  const header = document.getElementById('header');
  const navToggle = document.getElementById('nav-toggle');
  const navMenu = document.getElementById('nav-menu');

  window.addEventListener('scroll', () => {
    if (window.scrollY > 100) {
      header?.classList.add('scrolled');
    } else {
      header?.classList.remove('scrolled');
    }
  });

  // Mobile menu toggle
  navToggle?.addEventListener('click', () => {
    navToggle.classList.toggle('active');
    navMenu?.classList.toggle('active');
  });

  // Close mobile menu when clicking on a link
  const navLinks = document.querySelectorAll('.nav-link');
  navLinks.forEach((link) => {
    link.addEventListener('click', () => {
      navToggle?.classList.remove('active');
      navMenu?.classList.remove('active');
    });
  });

  // Active link highlighting
  const sections = document.querySelectorAll('section[id]');

  function highlightNavLink() {
    const scrollY = window.pageYOffset;

    sections.forEach((current) => {
      const element = current as HTMLElement;
      const sectionHeight = element.offsetHeight;
      const sectionTop = element.offsetTop - 100;
      const sectionId = current.getAttribute('id');

      if (scrollY > sectionTop && scrollY <= sectionTop + sectionHeight) {
        document
          .querySelector(`.nav-link[href="#${sectionId}"]`)
          ?.classList.add('active');
      } else {
        document
          .querySelector(`.nav-link[href="#${sectionId}"]`)
          ?.classList.remove('active');
      }
    });
  }

  window.addEventListener('scroll', highlightNavLink);
</script>
