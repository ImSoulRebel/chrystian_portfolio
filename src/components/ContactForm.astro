---
const formAction = 'https://formspree.io/f/mqkoanop'; // Reemplaza con tu ID de Formspree
---

<form class="contact-form" method="POST" action={formAction} id="contact-form">
  <div class="form-group">
    <label for="name">Nombre *</label>
    <input
      type="text"
      id="name"
      name="name"
      placeholder="Tu nombre completo"
      required
      autocomplete="name"
    />
  </div>

  <div class="form-group">
    <label for="email">Email *</label>
    <input
      type="email"
      id="email"
      name="email"
      placeholder="tu@email.com"
      required
      autocomplete="email"
    />
  </div>

  <div class="form-group">
    <label for="company">Empresa/Organizaci√≥n</label>
    <input
      type="text"
      id="company"
      name="company"
      placeholder="Nombre de tu empresa (opcional)"
      autocomplete="organization"
    />
  </div>

  <div class="form-group">
    <label for="project-type">Tipo de proyecto *</label>
    <select id="project-type" name="project-type" required>
      <option value="">Selecciona el tipo de proyecto</option>
      <option value="app-movil">Aplicaci√≥n m√≥vil</option>
      <option value="app-web">Aplicaci√≥n web</option>
      <option value="consultoria">Consultor√≠a t√©cnica</option>
      <option value="liderazgo">Liderazgo t√©cnico</option>
      <option value="migracion">Migraci√≥n/Modernizaci√≥n</option>
      <option value="otro">Otro</option>
    </select>
  </div>

  <div class="form-group">
    <label for="budget">Presupuesto estimado</label>
    <select id="budget" name="budget">
      <option value="">Selecciona un rango (opcional)</option>
      <option value="5k-15k">‚Ç¨5,000 - ‚Ç¨15,000</option>
      <option value="15k-30k">‚Ç¨15,000 - ‚Ç¨30,000</option>
      <option value="30k-50k">‚Ç¨30,000 - ‚Ç¨50,000</option>
      <option value="50k+">‚Ç¨50,000+</option>
      <option value="por-definir">Por definir</option>
    </select>
  </div>

  <div class="form-group">
    <label for="timeline">Timeline esperado</label>
    <select id="timeline" name="timeline">
      <option value="">Selecciona un timeline (opcional)</option>
      <option value="inmediato">Inmediato (menos de 1 mes)</option>
      <option value="1-3-meses">1-3 meses</option>
      <option value="3-6-meses">3-6 meses</option>
      <option value="6-12-meses">6-12 meses</option>
      <option value="flexible">Flexible</option>
    </select>
  </div>

  <div class="form-group">
    <label for="message">Describe tu proyecto *</label>
    <textarea
      id="message"
      name="message"
      placeholder="Cu√©ntame sobre tu proyecto, objetivos, caracter√≠sticas principales, usuarios objetivo, etc. Cuanta m√°s informaci√≥n compartas, mejor podr√© ayudarte."
      required
      rows="6"></textarea>
  </div>

  <div class="form-actions">
    <button type="submit" class="btn btn-primary">
      <span class="btn-text">üì§ Enviar mensaje</span>
      <span class="btn-loading" style="display: none;">
        <svg class="spinner" width="20" height="20" viewBox="0 0 50 50">
          <circle
            class="path"
            cx="25"
            cy="25"
            r="20"
            fill="none"
            stroke="currentColor"
            stroke-width="5"
            stroke-miterlimit="10"></circle>
        </svg>
        Enviando...
      </span>
    </button>
  </div>

  <!-- Success/Error Messages -->
  <div class="form-message" id="form-message" style="display: none;"></div>
</form>

<style>
  .contact-form {
    max-width: 100%;
    background: var(--gradient-secondary);
    padding: 3rem;
    border-radius: var(--border-radius);
    border: 1px solid rgba(0, 212, 255, 0.1);
    box-shadow: var(--shadow-dark);
  }

  .form-group {
    margin-bottom: 2rem;
  }

  .form-group label {
    display: block;
    color: var(--text-primary);
    font-weight: 600;
    margin-bottom: 0.8rem;
    font-size: 1rem;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    width: 100%;
    padding: 1rem 1.5rem;
    border-radius: var(--border-radius);
    border: 2px solid rgba(0, 212, 255, 0.2);
    background: var(--background-dark);
    color: var(--text-primary);
    font-size: 1rem;
    font-family: inherit;
    transition: var(--transition);
    resize: vertical;
  }

  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(0, 212, 255, 0.1);
    transform: translateY(-2px);
  }

  .form-group input::placeholder,
  .form-group textarea::placeholder {
    color: var(--text-muted);
  }

  .form-group select {
    cursor: pointer;
  }

  .form-group textarea {
    min-height: 120px;
    line-height: 1.6;
  }

  .form-actions {
    text-align: center;
    margin-top: 2rem;
  }

  .form-actions .btn {
    min-width: 200px;
    position: relative;
    overflow: hidden;
  }

  .btn-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .spinner {
    animation: spin 1s linear infinite;
  }

  .spinner .path {
    stroke-dasharray: 90, 150;
    stroke-dashoffset: 0;
    stroke-linecap: round;
    animation: dash 1.5s ease-in-out infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes dash {
    0% {
      stroke-dasharray: 1, 150;
      stroke-dashoffset: 0;
    }
    50% {
      stroke-dasharray: 90, 150;
      stroke-dashoffset: -35;
    }
    100% {
      stroke-dasharray: 90, 150;
      stroke-dashoffset: -124;
    }
  }

  .form-message {
    margin-top: 1.5rem;
    padding: 1rem 1.5rem;
    border-radius: var(--border-radius);
    text-align: center;
    font-weight: 500;
  }

  .form-message.success {
    background: rgba(124, 242, 157, 0.1);
    border: 1px solid #7cf29d;
    color: #7cf29d;
  }

  .form-message.error {
    background: rgba(255, 107, 107, 0.1);
    border: 1px solid #ff6b6b;
    color: #ff6b6b;
  }

  /* Form validation styles */
  .form-group input:invalid:not(:placeholder-shown),
  .form-group select:invalid:not(:placeholder-shown),
  .form-group textarea:invalid:not(:placeholder-shown) {
    border-color: #ff6b6b;
  }

  .form-group input:valid,
  .form-group select:valid,
  .form-group textarea:valid {
    border-color: rgba(124, 242, 157, 0.5);
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .contact-form {
      padding: 2rem 1.5rem;
    }

    .form-group {
      margin-bottom: 1.5rem;
    }

    .form-group input,
    .form-group select,
    .form-group textarea {
      padding: 0.8rem 1rem;
    }
  }
</style>

<script>
  const form = document.getElementById('contact-form') as HTMLFormElement;
  const message = document.getElementById('form-message') as HTMLElement;
  const submitBtn = form?.querySelector(
    'button[type="submit"]',
  ) as HTMLButtonElement;
  const btnText = submitBtn?.querySelector('.btn-text') as HTMLElement;
  const btnLoading = submitBtn?.querySelector('.btn-loading') as HTMLElement;

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Show loading state
    btnText.style.display = 'none';
    btnLoading.style.display = 'flex';
    submitBtn.disabled = true;

    try {
      const formData = new FormData(form);
      const response = await fetch(form.action, {
        method: 'POST',
        body: formData,
        headers: {
          Accept: 'application/json',
        },
      });

      if (response.ok) {
        // Success
        message.textContent =
          '¬°Gracias! Tu mensaje ha sido enviado correctamente. Te responder√© lo antes posible.';
        message.className = 'form-message success';
        message.style.display = 'block';
        form.reset();
      } else {
        throw new Error('Error en el env√≠o');
      }
    } catch (error) {
      // Error
      message.textContent =
        'Hubo un error al enviar el mensaje. Por favor, intenta nuevamente o contacta directamente por email.';
      message.className = 'form-message error';
      message.style.display = 'block';
    } finally {
      // Reset button state
      btnText.style.display = 'block';
      btnLoading.style.display = 'none';
      submitBtn.disabled = false;
    }
  });

  // Auto-hide message after 5 seconds
  const hideMessage = () => {
    setTimeout(() => {
      if (message.style.display === 'block') {
        message.style.display = 'none';
      }
    }, 5000);
  };

  // Add observer for message visibility
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (
        mutation.type === 'attributes' &&
        mutation.attributeName === 'style'
      ) {
        if (message.style.display === 'block') {
          hideMessage();
        }
      }
    });
  });

  if (message) {
    observer.observe(message, { attributes: true });
  }
</script>
