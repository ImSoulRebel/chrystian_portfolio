---
import Icon from './Icon.astro';

interface Props {
  name: string;
  icon?: string; // URL del icono o nombre del icono
  url?: string | undefined; // URL oficial de la skill (opcional)
}

const { name, icon, url } = Astro.props;

// Mapeo de nombres de skills a iconos (fallback para compatibilidad)
const iconMapping = {
  Flutter: 'flutter',
  Dart: 'dart',
  Firebase: 'firebase',
  TypeScript: 'typescript',
  JavaScript: 'javascript',
  React: 'react',
  'Node.js': 'nodejs',
  Docker: 'docker',
  AWS: 'aws',
  Astro: 'astro',
  SolidJS: 'solidjs',
  'BLoC Pattern': 'bloc',
  'Clean Architecture': 'architecture',
  WebSockets: 'websockets',
  Git: 'git',
  'CI/CD': 'cicd',
  'GitHub Actions': 'cicd',
  GetX: 'react',
  Riverpod: 'react',
  Provider: 'react',
  auto_route: 'code',
  get_it: 'code',
  dio: 'api',
  TailwindCSS: 'css',
  'Video.js': 'video',
  Hive: 'database',
  SharedPreferences: 'storage',
  Sentry: 'monitoring',
  JWT: 'security',
  'CSS Modules': 'css',
  PWA: 'web',
  Netlify: 'cloud',
};

// Determinar si el icon es una URL completa o un nombre de icono
const isIconUrl =
  icon &&
  (icon.startsWith('http') || icon.startsWith('/') || icon.includes('.svg'));
const iconName = isIconUrl
  ? null
  : icon ||
    iconMapping[name as keyof typeof iconMapping] ||
    name?.toLowerCase();
---

<div
  class={`skill-item ${url ? 'skill-clickable' : ''}`}
  data-skill-url={url || ''}
>
  <div class="skill-icon">
    {
      isIconUrl ? (
        <img
          src={icon}
          alt={`${name} logo`}
          width="40"
          height="40"
          loading="lazy"
        />
      ) : (
        <Icon name={iconName} size={40} />
      )
    }
  </div>
  <h4 class="skill-name">{name}</h4>
  {
    url && (
      <div class="skill-link-indicator" aria-hidden="true">
        <svg
          width="14"
          height="14"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M7 17L17 7M17 7H7M17 7V17"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
      </div>
    )
  }
</div>

<style>
  .skill-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-width: 160px;
    height: 160px;
    padding: 2rem 2rem;
    background: var(--background-card);
    border-radius: var(--border-radius);
    border: 1px solid rgba(0, 212, 255, 0.1);
    transition: var(--transition);
    position: relative;
    overflow: hidden;
    margin: 0 0.5rem;
    cursor: pointer;
  }

  .skill-clickable {
    cursor: pointer;
  }

  .skill-clickable:focus {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
  }

  .skill-link-indicator {
    position: absolute;
    top: 0.75rem;
    right: 0.75rem;
    color: var(--primary-color);
    opacity: 0.6;
    transition: all 0.3s ease;
    background: rgba(0, 212, 255, 0.1);
    border-radius: 50%;
    padding: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(5px);
  }

  .skill-clickable:hover .skill-link-indicator {
    opacity: 1;
    transform: scale(1.1) rotate(12deg);
    background: rgba(0, 212, 255, 0.2);
    box-shadow: 0 2px 8px rgba(0, 212, 255, 0.3);
  }

  .skill-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 3px;
    background: var(--gradient-primary);
    transition: left 0.5s ease;
  }

  .skill-item:hover::before {
    left: 0;
  }

  .skill-item:hover {
    transform: translateY(-8px) scale(1.05);
    box-shadow: var(--shadow-light);
    border-color: var(--primary-color);
    background: linear-gradient(
      135deg,
      var(--background-card) 0%,
      rgba(0, 212, 255, 0.05) 100%
    );
  }

  .skill-icon {
    width: 50px;
    height: 50px;
    margin-bottom: 0.75rem;
    padding: 12px;
    background: rgba(0, 212, 255, 0.3);
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: var(--transition);
    box-shadow: 0 4px 15px rgba(0, 212, 255, 0.2);
    backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .skill-icon img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    filter: brightness(1.1) contrast(1.1);
    transition: var(--transition);
  }

  .skill-item:hover .skill-icon {
    transform: rotateY(360deg) scale(1.1);
    box-shadow: 0 6px 25px rgba(0, 212, 255, 0.4);
    background: rgba(0, 212, 255, 1);
    border-color: rgba(255, 255, 255, 0.3);
  }

  .skill-name {
    color: var(--text-primary);
    font-size: 0.9rem;
    font-weight: 600;
    text-align: center;
    margin: 0;
    line-height: 1.2;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 100%;
  }

  .skill-item:hover .skill-name {
    color: var(--primary-color);
  }

  @media (max-width: 768px) {
    .skill-item {
      min-width: 140px;
      height: 100px;
      padding: 1rem 0.75rem;
    }

    .skill-icon {
      width: 40px;
      height: 40px;
      margin-bottom: 0.5rem;
      padding: 10px;
    }

    .skill-name {
      font-size: 0.8rem;
    }
  }
</style>
