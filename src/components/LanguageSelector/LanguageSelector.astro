---
import { getLocalizedPath, getAlternateLocale, type Locale } from '@utils/i18n';

interface Props {
  currentLocale: Locale;
  currentPath: string;
}

const { currentLocale, currentPath } = Astro.props;

const alternateLocale = getAlternateLocale(currentLocale);
const alternatePath = getLocalizedPath(currentPath, alternateLocale);

const languageLabels = {
  es: { label: 'ES', name: 'Espa√±ol' },
  en: { label: 'EN', name: 'English' },
};

const currentLang = languageLabels[currentLocale as Locale];
const alternateLang = languageLabels[alternateLocale as Locale];
---

<div class="language-selector">
  <button
    class="lang-toggle"
    aria-label={`Switch to ${alternateLang.name}`}
    data-lang-toggle
    type="button"
  >
    <span class="lang-label">{currentLang.label}</span>
    <svg
      class="lang-arrow"
      width="12"
      height="8"
      viewBox="0 0 12 8"
      fill="none"
    >
      <path
        d="M1 1.5L6 6.5L11 1.5"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </button>
  <div class="lang-dropdown" data-lang-dropdown>
    <a href={alternatePath} class="lang-option" hreflang={alternateLocale}>
      <span class="lang-name">{alternateLang.name}</span>
    </a>
  </div>
</div>

<style>
  .language-selector {
    position: relative;
    display: inline-block;
    font-family: inherit;
    z-index: 1001;
  }

  .lang-toggle {
    position: relative;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    user-select: none;
    outline: none;
    min-width: 60px;
    justify-content: space-between;
  }

  .lang-toggle:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(0, 212, 255, 0.4);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 212, 255, 0.15);
  }

  .lang-toggle:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(0, 212, 255, 0.3);
  }

  .lang-toggle.active {
    background: rgba(255, 255, 255, 0.2);
    border-color: var(--primary-color);
  }

  .lang-label {
    font-weight: 600;
    letter-spacing: 0.025em;
    text-transform: uppercase;
  }

  .lang-arrow {
    transition: transform 0.3s ease;
    color: var(--text-secondary);
    flex-shrink: 0;
  }

  .lang-toggle:hover .lang-arrow {
    color: var(--primary-color);
  }

  .lang-toggle.active .lang-arrow {
    transform: rotate(180deg);
  }

  .lang-dropdown {
    position: absolute;
    top: calc(100% + 0.5rem);
    left: 0;
    right: auto;
    background: rgba(15, 15, 35, 0.95);
    backdrop-filter: blur(15px);
    border: 1px solid rgba(0, 212, 255, 0.2);
    border-radius: 8px;
    padding: 0.25rem;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    z-index: 10;

    /* Adaptaci√≥n autom√°tica al contenido */
    min-width: 100px;
    width: max-content;
    max-width: 160px;

    /* Estado inicial (oculto) */
    display: none;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-0.5rem);
    transition: all 0.3s ease;
    pointer-events: none;
  }

  .lang-dropdown.open {
    display: block;
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
    pointer-events: auto;
  }

  .lang-option {
    display: block;
    padding: 0.625rem 0.375rem;
    border-radius: 6px;
    color: var(--text-secondary);
    text-decoration: none;
    transition:
      background-color 0.15s ease,
      color 0.15s ease,
      transform 0.15s ease;
    font-size: 0.875rem;
    cursor: pointer;
    outline: none;
    white-space: nowrap;
    text-align: center;
    width: 100%;
    box-sizing: border-box;
    margin: 0;
    font-weight: 500;
    will-change: background-color, color;
  }

  .lang-option:hover,
  .lang-option:focus {
    background: rgba(0, 212, 255, 0.15);
    color: var(--text-primary);
    transform: translateY(-1px);
  }

  .lang-option:active {
    background: rgba(0, 212, 255, 0.25);
    transform: translateY(0);
  }

  .lang-name {
    display: inline;
    font-weight: inherit;
    font-size: inherit;
    opacity: 1;
  }

  /* Responsive adaptations */
  @media (max-width: 768px) {
    .language-selector {
      position: fixed;
      top: 1rem;
      right: 1rem;
      z-index: 1002;
    }

    .lang-toggle {
      padding: 0.625rem 0.875rem;
      font-size: 0.8rem;
    }

    .lang-dropdown {
      left: auto;
      right: 0;
      min-width: 140px;
      max-width: 160px;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .lang-toggle {
      border-color: var(--primary-color);
      background: rgba(0, 0, 0, 0.8);
    }

    .lang-dropdown {
      background: var(--bg-primary);
      border-color: var(--primary-color);
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .lang-toggle,
    .lang-dropdown,
    .lang-arrow,
    .lang-option {
      transition: none;
    }
  }
</style><script>
  function initLanguageSelector() {
    console.log('Iniciando LanguageSelector...');

    const toggle = document.querySelector(
      '[data-lang-toggle]'
    ) as HTMLButtonElement;
    const dropdown = document.querySelector(
      '[data-lang-dropdown]'
    ) as HTMLElement;

    console.log('Toggle encontrado:', toggle);
    console.log('Dropdown encontrado:', dropdown);

    if (!toggle || !dropdown) {
      console.warn('LanguageSelector: Elementos no encontrados');
      return;
    }

    let isOpen = false;

    function adjustDropdownWidth() {
      // Hacer visible temporalmente para medir el contenido
      dropdown.style.display = 'block';
      dropdown.style.visibility = 'hidden';
      dropdown.style.opacity = '0';

      // Obtener el ancho del contenido
      const contentWidth = dropdown.scrollWidth;
      const toggleWidth = toggle.offsetWidth;

      // Establecer el ancho m√≠nimo basado en el toggle o el contenido
      const minWidth = Math.max(toggleWidth, 100);
      const finalWidth = Math.max(contentWidth + 4, minWidth); // +4 para padding muy reducido

      dropdown.style.width = `${Math.min(finalWidth, 160)}px`; // M√°ximo 160px

      // Ocultar nuevamente
      dropdown.style.display = 'none';
      dropdown.style.visibility = 'visible';
    }

    function openDropdown() {
      console.log('üîµ Abriendo dropdown...');
      isOpen = true;

      // Ajustar ancho antes de mostrar
      adjustDropdownWidth();

      dropdown.style.display = 'block';
      dropdown.style.opacity = '1';
      dropdown.style.visibility = 'visible';
      dropdown.style.transform = 'translateY(0)';
      dropdown.style.pointerEvents = 'auto';
      dropdown.classList.add('open');
      toggle.classList.add('active');
    }

    function closeDropdown() {
      console.log('üî¥ Cerrando dropdown...');
      isOpen = false;
      dropdown.style.display = 'none';
      dropdown.style.opacity = '0';
      dropdown.style.visibility = 'hidden';
      dropdown.style.transform = 'translateY(-0.5rem)';
      dropdown.style.pointerEvents = 'none';
      dropdown.classList.remove('open');
      toggle.classList.remove('active');
    }

    function toggleDropdown() {
      console.log('üîÑ Toggle dropdown, estado actual:', isOpen);
      if (isOpen) {
        closeDropdown();
      } else {
        openDropdown();
      }
    }

    // Estado inicial
    closeDropdown();
    // Ajustar el ancho inicial
    setTimeout(() => adjustDropdownWidth(), 0);

    // Event listener para el click
    toggle.addEventListener('click', function (e) {
      console.log('üëÜ Click en toggle detectado');
      e.preventDefault();
      e.stopPropagation();
      toggleDropdown();
    });

    // Cerrar al hacer click fuera
    document.addEventListener('click', function (e) {
      const target = e.target as HTMLElement;
      if (!toggle.contains(target) && !dropdown.contains(target)) {
        if (isOpen) {
          console.log('üëÜ Click fuera detectado, cerrando...');
          closeDropdown();
        }
      }
    });

    // Cerrar con ESC
    document.addEventListener('keydown', function (e) {
      if (e.key === 'Escape' && isOpen) {
        console.log('‚å®Ô∏è ESC presionado, cerrando...');
        closeDropdown();
      }
    });

    // Reajustar en cambio de tama√±o de ventana
    window.addEventListener('resize', function () {
      if (isOpen) {
        adjustDropdownWidth();
      }
    });

    console.log('‚úÖ LanguageSelector inicializado correctamente');
  }

  // Ejecutar cuando el DOM est√© listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLanguageSelector);
  } else {
    initLanguageSelector();
  }

  // Para navegaci√≥n SPA de Astro
  document.addEventListener('astro:page-load', initLanguageSelector);
</script>
